/*
 * Erfan Azad
 * Date: 3 November 2014
 * File: Seq_QuickHull.java
 * Description: This file contains methods for solving the quick hull problem sequentially. 
 */

import java.util.*;

public class Seq_QuickHull {
	
	//returns the point with the maximum x value in plist of Points
	public Point getMax_X(Point[] plist){
		Point p = plist[0];
		for(int i=0; i<plist.length; i++){
			if(plist[i].x > p.x){
				p = plist[i];
			}
		}
		return p;
	}
	
	//returns the point with the minimum x value in plist of Points
	public Point getMin_X(Point[] plist){
		Point p = plist[0];
		for(int i=0; i<plist.length; i++){
			if(plist[i].x < p.x){
				p = plist[i];
			}
		}
		return p;
	}
	
	//determines coefficients A,B,C in Ax+By+C=0 given input line given two points a and b
	public static float[] getCoefficients(Point a, Point b){
		float[] c = new float[3];
		c[0] = (b.y - a.y);
		c[1] = -(b.x - a.x);
		c[2] = -((b.y - a.y)*a.x -(b.x - a.x)*a.y);
		return c;
	}
	
	//returns the distance of c from a line ab.
	public static float getDistance(Point a, Point b, Point c ){
		float[] coeffs = getCoefficients(a, b);
		System.out.printf(Arrays.toString(coeffs));
		float distance = (float) ((Math.abs(coeffs[0]*c.x + coeffs[1]*c.y + coeffs[2])/(Math.sqrt(coeffs[0]*coeffs[0] - coeffs[1]*coeffs[1]))));
		return distance;
	}

	public static void main(String[] args){
		Point p1 = new Point(-2 , 3);
		Point p2 = new Point(2,4);
		Point p3 = new Point(0, 5);
		//	System.out.printf("this is x: %.2f, and this is y: %.2f\n",p.x, p.y);
		float  distance = getDistance(p1, p2, p3);
		System.out.printf("distance is: %f",distance);
		
	}
}
