/*
 * Modified by Erfan Azad on 30 December 2014
 */
import java.util.ArrayList;

public class PrimesImprovement{
	
	/*
	 * This method uses the fact that the only even prime number is 2
	 * so instead of checking all the numbers we only look for the odd
	 * numbers that are greater than 2, which are half of the numbers.
	 */
	public static void getPrimes1(int max){
		boolean result;
		for(int i=2; i<= max; i++){
			result = true;
			if(i%2 == 0) //if divisible by 2
				result = false;
			for(int j=3; j*j<=i; j+=2){//checking the odd numbers less than or equal to the square root of i
				if(i%j==0) 
					result = false;
			}
		if(result || i==2) System.out.print(i+" ");
		}
		System.out.println();
	}
	
	/*
	 * This method uses Sieve of Eratosthenes algorithm
	 * to calculate all the prime numbers up to a limit.
	 */
	public static void getPrimes2(int max){
		int[] list = new int[max-1];
		int index = 0;
		for(int i=2; i<=max; i++){//initializing the array to hold [2:max]
			list[i-2] = i;
		}
		
		while(index < list.length-1){
			if(list[index] != -1){//if it has not already been marked
				int coeff = 2;
				while(coeff*list[index] <= max){
					list[coeff*list[index]-2] = -1;
					coeff++;
				}
			}
			index++;
		}
		
		for(int k = 0; k<list.length; k++){
			if(list[k] != -1)
				System.out.print(list[k] + " ");
		}
	}
	
	public static void main(String[] args){
	    //This code should print out the prime numbers.
	    //task: Fix and improve the algorithm
	    System.out.println("Printing primes from 1 to 100");
	    int i;
	    int j;
	    boolean prime;
	    for(i = 2; i <= 100; i++){
	    	prime = true;
	    	for(j = 2; j < i; j++) 
	    		if(i%j == 0) prime = false; 
	    	if(prime) System.out.print(i+" ");
	    }
	    	System.out.println();
		
	    //using getPrimes1()	
	    System.out.println("\nusing getPrime1 method");
	    getPrimes1(100);
	    
	    //using getPrimes2()
	    System.out.println("using getPrime2 method");
	    getPrimes2(100);
  	}
}


