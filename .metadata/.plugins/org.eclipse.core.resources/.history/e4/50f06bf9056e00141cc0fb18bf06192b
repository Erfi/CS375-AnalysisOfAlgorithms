import java.util.*;

public class HillClimbingSubsetSum {
	ArrayList<Integer> set = new ArrayList<Integer>();
	Random rand;

	public HillClimbingSubsetSum(int[] preset){
		for(int i=0; i<preset.length; i++){//create an arraylist from the int[] 
			set.add(preset[i]);
		}
		rand = new Random();
	}
	
	public  ArrayList<Integer> getNeighbor(ArrayList<Integer> s){
		ArrayList<Integer> t = new ArrayList<Integer>(); 
		t = (ArrayList<Integer>) s.clone();
		int a, b;
		a = rand.nextInt(set.size());
		b = rand.nextInt(set.size());
		while(a == b){
			b = rand.nextInt(set.size());
		}
		Integer x1 = set.get(a);
		Integer x2 = set.get(b);
		if(s.contains(x1)){
			t.remove(x1);
		}else{
			t.add(x1);
		}
		if(s.contains(x2)){
			if(rand.nextFloat() > 0.5){
				t.remove(x2);
			}
		}else{
			if(rand.nextFloat() > 0.5){
				t.add(x2);
			}
		}
		
		return t;
	}
	
	public int getSum(ArrayList<Integer> set){
		int sum = 0;
		for(int i=0; i<set.size(); i++){
			sum += set.get(i);
		}
		return sum;
	}
	
	public int getResidue(int sum, int numIterations){
		int minResidue;
		int bound = rand.nextInt(set.size());
		ArrayList<Integer> current = new ArrayList<Integer>();
		
		for(int i=0; i<bound; i++ ){
			current.add(set.get(i));
		}
		minResidue = getSum(current);
		for(int i=0; i< numIterations; i++){
			ArrayList<Integer> temp = getNeighbor(current);
			int tempsum = getSum(temp);
			if(tempsum < minResidue){
				current = temp;
			}
			minResidue = tempsum;
		}
		return Math.abs(minResidue - sum);
	}
	
	public static void main(String[] args) {
		int[] set = {9, 3, 1, 2};
		int residue;
		HillClimbingSubsetSum sumInstance = new HillClimbingSubsetSum(set);
		residue = sumInstance.getResidue(4, 300);
		System.out.println(residue);
	}

}
