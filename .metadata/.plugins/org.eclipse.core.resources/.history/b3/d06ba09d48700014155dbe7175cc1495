
public class DynamicSubsetSum {
	public static boolean subsetExists(long[] set, long sum){
		boolean[][] Q = new boolean[(int) (sum + 1)][set.length + 1];
		
		for(int i=0; i <= set.length; i++){//for all sum == 0 the Q[i][j] = 0
			Q[0][i] = true;
		}
		
		for(int i=1; i <= sum; i++){//for all empty sets with sum not 0 the Q[i][j] is false
			Q[i][0] = false;
		}
		
		for(int i=1; i<=sum; i++){
			for(int j=1; j<=set.length; j++){
				Q[i][j] = Q[i][j-1];
				if(i >= set[j-1]){//if sum is bigger than or equal to the j-1th element of set
					//then 
					Q[i][j] = Q[i][j] || Q[(int) (i- set[j-1])][j-1];
				}
			}
		}
		
//		//code below is for printing the Q table
//		for(int i=0; i<=sum; i++){
//			for(int j=0; j<=set.length; j++){
//				if(Q[i][j] == true){
//					System.out.print(" [ " + Q[i][j] +"  ] ");
//				}else{
//					System.out.print(" [ " + Q[i][j] +" ] ");
//				}
//			}
//			System.out.print('\n');
//		}
		
		
		return Q[(int) sum][set.length];
	}
	public static void main(String[] args) {
		long[] set = {1,3,4,5,6,7,8,0,45,6,7,5,2,3,35,14,3,12,7,22,06,1,2,3,5,2,3,24,7,34,35,};
		long sum = 550;
		long time;
		Timer.start();
		boolean result = subsetExists(set,sum);
		Timer.stop();
		time = Timer.getRunTime();
		if(result==true){
			System.out.println("yup");
			System.out.println("Runtime: "+ time);
		}else{
			System.out.println("nope");
			System.out.println("Runtime: "+ time);
		}
	}

}
